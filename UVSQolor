import numpy as np
from PIL import Image, ImageTk
import tkinter as tk
from tkinter import filedialog

# Initialiser les variables
img = None
img_org = None
photo = None
matrice_pixels = None

def charger():
    global photo, img, canvas, img_org

    nom_fichier = str(filedialog.askopenfilename(title="Ouvrir une image"))

    if nom_fichier != "":
        img = Image.open(nom_fichier)
        photo = ImageTk.PhotoImage(img)

        canvas.delete("all")
        canvas.config(width=img.size[0], height=img.size[1])
        canvas.create_image(0, 0, anchor=tk.NW, image=photo)

    img_org = img

def appliquer_filtre(effet):
    global photo, img, canvas, matrice_pixels, img_org

    try:
        matrice_pixels = np.array(img)

        if effet == "vert":
            matrice_pixels[..., 0] = 0
            matrice_pixels[..., 2] = 0
        elif effet == 'gris':
            img = img.convert("L")
            matrice_pixels = np.array(img.convert("RGB"))
        elif effet == "Nul":
            matrice_pixels = np.array(img_org)

        img = Image.fromarray(matrice_pixels)

        if canvas is not None:
            photo = ImageTk.PhotoImage(img)
            canvas.delete("all")
            canvas.config(width=img.size[0], height=img.size[1])
            canvas.create_image(0, 0, anchor=tk.NW, image=photo)

    except Exception as e:
        print("Erreur :", e)

def luminositer():
    global photo, img, canvas, matrice_pixels, img_org
    global dialogue_effet

    dialogue_effet = tk.Toplevel(fenetre)
    dialogue_effet.title("Luminosité")
    dialogue_effet.geometry("300x150")
    dialogue_effet.grab_set()

    matrice_pixels = np.array(img)

    def correction_gamma(valeur_gamma_str):
        gamma = 1.0 / float(valeur_gamma_str)
        matrice_norm = matrice_pixels.astype(np.float32) / 255.0
        matrice_corr = np.power(matrice_norm, gamma)
        matrice_gamma = np.clip(matrice_corr * 255, 0, 255).astype(np.uint8)

        img_corr = Image.fromarray(matrice_gamma)

        global photo
        photo = ImageTk.PhotoImage(img_corr)
        canvas.config(width=img_corr.width, height=img_corr.height)
        canvas.delete("all")
        canvas.create_image(0, 0, anchor=tk.NW, image=photo)

    def annuler_effet():
        global img, photo
        img = img
        photo = ImageTk.PhotoImage(img)
        canvas.config(width=img.width, height=img.height)
        canvas.delete("all")
        canvas.create_image(0, 0, anchor=tk.NW, image=photo)
        dialogue_effet.destroy()

    slider = tk.Scale(dialogue_effet, from_=0.1, to=3.0,
                      orient=tk.HORIZONTAL, length=200,
                      resolution=0.1, digits=2,
                      command=correction_gamma)
    slider.set(1.0)
    slider.pack(pady=20)

    frame_boutons = tk.Frame(dialogue_effet)
    frame_boutons.pack(side=tk.BOTTOM, pady=10)

    bouton_appliquer = tk.Button(frame_boutons, text="Appliquer",
                                 command=dialogue_effet.destroy)
    bouton_appliquer.pack(side=tk.LEFT, padx=10)

    bouton_annuler = tk.Button(frame_boutons, text="Annuler",
                               command=annuler_effet)
    bouton_annuler.pack(side=tk.LEFT, padx=10)

def fusion_images():
    global img, photo, canvas

    chemin_image2 = filedialog.askopenfilename(title="Choisir une image à fusionner")
    if chemin_image2 == "":
        return

    img2 = Image.open(chemin_image2)

    if img2.size != img.size:
        img2 = img2.resize(img.size)

    img_fusion = Image.blend(img, img2, alpha=0.5)

    img = img_fusion
    photo = ImageTk.PhotoImage(img)
    canvas.config(width=img.width, height=img.height)
    canvas.delete("all")
    canvas.create_image(0, 0, anchor=tk.NW, image=photo)

# Fenêtre principale
fenetre = tk.Tk()
fenetre.title("UVSQolor")
fenetre.geometry("500x500")

# Création du canvas
canvas = tk.Canvas(fenetre)
canvas.pack()

# Création du menu
menu = tk.Menu(fenetre)

menu_ouvrir = tk.Menu(menu)
menu.add_cascade(label="Ouvrir", menu=menu_ouvrir)
menu_ouvrir.add_command(label="Ouvrir une image", command=lambda: charger())

menu_effets = tk.Menu(menu)
menu.add_cascade(label="Effets", menu=menu_effets)
menu_effets.add_command(label="Ajouter un filtre vert", command=lambda: appliquer_filtre("vert"))
menu_effets.add_command(label="Ajouter un filtre gris", command=lambda: appliquer_filtre("gris"))
menu_effets.add_command(label="Enlever tous les effets", command=lambda: appliquer_filtre("Nul"))

menu_lum = tk.Menu(menu)
menu.add_cascade(label="Luminosité", menu=menu_lum)
menu_lum.add_command(label="Ajuster la luminosité", command=lambda: luminositer())

menu.add_command(label="Fusionner image", command=fusion_images)

fenetre.pack_propagate(True)
fenetre.config(menu=menu)
fenetre.mainloop()
